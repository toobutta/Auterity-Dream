name: Quality Gates

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [18.x, 20.x]

    steps:
    - uses: actions/checkout@v4

    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run TypeScript check
      run: npx tsc --noEmit

    - name: Run Frontend Tests
      run: npm run test:frontend

    - name: Run Backend Tests
      run: npm run test:backend

    - name: Run Linting
      run: npm run lint

    - name: Build Frontend
      run: cd frontend && npm run build

    - name: Build Backend
      run: cd backend && npm run build

  security-scan:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run Security Scan
      run: npm audit --audit-level moderate

    - name: Run SAST Scan
      run: |
        cd frontend && npm run security-scan
        cd ../backend && python -m bandit -r . -f json -o security-report.json

  performance-test:
    runs-on: ubuntu-latest
    needs: test

    steps:
    - uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run Performance Tests
      run: npm run performance-test

    - name: Upload Performance Results
      uses: actions/upload-artifact@v4
      with:
        name: performance-results
        path: performance-results/

  code-quality:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run Code Coverage
      run: npm run test:coverage

    - name: Upload Coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage/lcov.info
        flags: unittests
        name: codecov-umbrella

  docker-build:
    runs-on: ubuntu-latest
    needs: [test, security-scan]

    steps:
    - uses: actions/checkout@v4

    - name: Build Docker Images
      run: |
        docker build -t auterity-frontend ./frontend
        docker build -t auterity-backend ./backend

    - name: Run Container Tests
      run: |
        docker run --rm auterity-frontend npm test
        docker run --rm auterity-backend python -m pytest

  integration-test:
    runs-on: ubuntu-latest
    needs: docker-build

    steps:
    - uses: actions/checkout@v4

    - name: Setup Docker Compose
      run: docker-compose -f docker-compose.test.yml up -d

    - name: Wait for services
      run: sleep 30

    - name: Run Integration Tests
      run: npm run test:integration

    - name: Cleanup
      run: docker-compose -f docker-compose.test.yml down

  compliance:
    runs-on: ubuntu-latest
    needs: test
    steps:
      - uses: actions/checkout@v4
      - name: Install compliance tools
        run: scripts/compliance/install_tools.sh
      - name: Generate SBOM
        run: scripts/compliance/generate_sbom.sh
      - name: Scan licenses
        run: scripts/compliance/scan_licenses.sh
      - name: Evaluate policy
        run: scripts/compliance/evaluate_policy.sh
      - name: Format artifacts
        if: github.ref == 'refs/heads/main'
        run: scripts/compliance/format_artifacts.sh
      - name: Upload compliance artifacts
        if: github.ref == 'refs/heads/main'
        uses: actions/upload-artifact@v4
        with:
          name: compliance-artifacts
          path: COMPLIANCE
