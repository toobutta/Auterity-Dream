name: Optimized CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
    paths-ignore:
      - '**/*.md'
      - 'docs/**'
  pull_request:
    branches: [ main, develop ]
    paths-ignore:
      - '**/*.md'
      - 'docs/**'

env:
  NODE_VERSION: '18'
  PYTHON_VERSION: '3.11'
  VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
  VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # Path-based change detection
  changes:
    runs-on: ubuntu-latest
    outputs:
      frontend: ${{ steps.changes.outputs.frontend }}
      backend: ${{ steps.changes.outputs.backend }}
      deploy-needed: ${{ steps.changes.outputs.frontend == 'true' || github.ref == 'refs/heads/main' }}
    steps:
      - uses: actions/checkout@v4
      - uses: dorny/paths-filter@v3
        id: changes
        with:
          filters: |
            frontend:
              - 'frontend/**'
              - 'shared/**'
              - 'vercel.json'
            backend:
              - 'backend/**'

  # Quality Gates (Blocking)
  quality-check:
    runs-on: ubuntu-latest
    needs: changes
    if: needs.changes.outputs.frontend == 'true'
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: 'frontend/package-lock.json'

      - name: Install dependencies
        run: |
          cd frontend
          npm ci --prefer-offline

      - name: Run linting (Blocking)
        run: |
          cd frontend
          npm run lint

      - name: Type checking (Blocking)
        run: |
          cd frontend
          npm run type-check

      - name: Run tests (Blocking)
        run: |
          cd frontend
          npm run test:coverage

      - name: Security audit (Blocking)
        run: |
          cd frontend
          npm audit --audit-level high

  # Build & Test
  build:
    runs-on: ubuntu-latest
    needs: [changes, quality-check]
    if: always() && needs.changes.outputs.frontend == 'true' && needs.quality-check.result == 'success'
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: 'frontend/package-lock.json'

      - name: Install dependencies
        run: |
          cd frontend
          npm ci --prefer-offline

      - name: Build application
        run: |
          cd frontend
          npm run build:vercel
        env:
          NODE_ENV: production

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: frontend-build
          path: frontend/dist/
          retention-days: 1

      - name: Build size analysis
        run: |
          cd frontend
          echo "## Build Size Analysis" >> $GITHUB_STEP_SUMMARY
          echo "| File | Size |" >> $GITHUB_STEP_SUMMARY
          echo "|------|------|" >> $GITHUB_STEP_SUMMARY
          find dist -name "*.js" -o -name "*.css" | head -10 | while read file; do
            size=$(du -h "$file" | cut -f1)
            echo "| $file | $size |" >> $GITHUB_STEP_SUMMARY
          done

  # Vercel Deployment
  deploy-vercel:
    runs-on: ubuntu-latest
    needs: [changes, build]
    if: needs.changes.outputs.deploy-needed == 'true' && needs.build.result == 'success'
    environment:
      name: ${{ github.ref == 'refs/heads/main' && 'production' || 'preview' }}
      url: ${{ steps.deploy.outputs.url }}
    steps:
      - uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: frontend-build
          path: frontend/dist/

      - name: Install Vercel CLI
        run: npm install --global vercel@latest

      - name: Pull Vercel Environment Information
        run: vercel pull --yes --environment=${{ github.ref == 'refs/heads/main' && 'production' || 'preview' }} --token=${{ secrets.VERCEL_TOKEN }}

      - name: Build Project Artifacts
        run: vercel build ${{ github.ref == 'refs/heads/main' && '--prod' || '' }} --token=${{ secrets.VERCEL_TOKEN }}

      - name: Deploy Project Artifacts to Vercel
        id: deploy
        run: |
          url=$(vercel deploy --prebuilt ${{ github.ref == 'refs/heads/main' && '--prod' || '' }} --token=${{ secrets.VERCEL_TOKEN }})
          echo "url=$url" >> $GITHUB_OUTPUT
          echo "## 🚀 Deployment Successful" >> $GITHUB_STEP_SUMMARY
          echo "**URL:** $url" >> $GITHUB_STEP_SUMMARY

      - name: Comment PR with deployment URL
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v6
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `## 🚀 Preview Deployment Ready!\n\n**URL:** ${{ steps.deploy.outputs.url }}\n\n*Deployed from commit ${{ github.sha }}*`
            })

  # Health Check
  health-check:
    runs-on: ubuntu-latest
    needs: deploy-vercel
    if: needs.deploy-vercel.result == 'success'
    steps:
      - name: Health check deployment
        run: |
          url="${{ needs.deploy-vercel.outputs.url || 'https://auterity-error-iq.vercel.app' }}"
          echo "Testing deployment at: $url"
          
          # Wait for deployment to be ready
          sleep 30
          
          # Basic health check
          response=$(curl -s -o /dev/null -w "%{http_code}" "$url" || echo "000")
          
          if [ "$response" = "200" ]; then
            echo "✅ Deployment health check passed"
            echo "## ✅ Health Check Passed" >> $GITHUB_STEP_SUMMARY
            echo "Deployment is responding correctly at $url" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ Deployment health check failed (HTTP $response)"
            echo "## ❌ Health Check Failed" >> $GITHUB_STEP_SUMMARY
            echo "Deployment returned HTTP $response" >> $GITHUB_STEP_SUMMARY
            exit 1
          fi
