name: CodeRabbit Backend Auto-Fix

on:
  pull_request:
    types: [opened, synchronize, reopened]
  issue_comment:
    types: [created]

jobs:
  analyze-coderabbit-feedback:
    if: contains(github.event.comment.body, 'coderabbitai') || contains(github.event.comment.body, 'CodeRabbit')
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        fetch-depth: 0

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install dependencies
      run: |
        npm install
        pip install -r requirements.txt

    - name: Analyze CodeRabbit Comments
      id: analyze
      run: |
        # Get PR comments from CodeRabbit
        COMMENTS=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
          "https://api.github.com/repos/${{ github.repository }}/issues/${{ github.event.issue.number || github.event.pull_request.number }}/comments" | \
          jq -r '.[] | select(.user.login == "coderabbitai" or .body | contains("CodeRabbit")) | .body')

        echo "CodeRabbit feedback found:"
        echo "$COMMENTS"

        # Extract backend issues
        BACKEND_ISSUES=$(echo "$COMMENTS" | grep -i "backend\|api\|python\|django\|flask\|fastapi" || echo "")

        if [ -n "$BACKEND_ISSUES" ]; then
          echo "Backend issues detected"
          echo "issues=true" >> $GITHUB_OUTPUT
          echo "$BACKEND_ISSUES" > coderabbit_backend_issues.txt
        else
          echo "No backend issues found"
          echo "issues=false" >> $GITHUB_OUTPUT
        fi

    - name: Auto-fix Backend Issues
      if: steps.analyze.outputs.issues == 'true'
      run: |
        echo "Starting automated backend fixes..."

        # Read the issues
        ISSUES=$(cat coderabbit_backend_issues.txt)

        # Common backend fixes
        if echo "$ISSUES" | grep -q "import"; then
          echo "Fixing import issues..."
          python scripts/fix_imports.py
        fi

        if echo "$ISSUES" | grep -q "type"; then
          echo "Fixing type annotation issues..."
          python scripts/fix_types.py
        fi

        if echo "$ISSUES" | grep -q "security\|vulnerability"; then
          echo "Fixing security issues..."
          python scripts/fix_security.py
        fi

        if echo "$ISSUES" | grep -q "performance"; then
          echo "Fixing performance issues..."
          python scripts/fix_performance.py
        fi

    - name: Run Backend Tests
      run: |
        echo "Running backend tests..."
        python -m pytest services/api/ -v --tb=short

    - name: Commit Fixes
      if: steps.analyze.outputs.issues == 'true'
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"

        git add .
        git diff --cached --quiet || git commit -m "fix: Auto-resolve CodeRabbit backend issues

Resolves issues identified by CodeRabbit AI"

    - name: Push Changes
      if: steps.analyze.outputs.issues == 'true'
      run: |
        git push origin ${{ github.head_ref }}

    - name: Comment on PR
      if: steps.analyze.outputs.issues == 'true'
      uses: actions/github-script@v7
      with:
        script: |
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: 'ðŸ¤– **CodeRabbit Backend Auto-Fix Complete**\n\n' +
                  'I have automatically resolved the backend issues identified by CodeRabbit:\n\n' +
                  'âœ… Fixed import issues\n' +
                  'âœ… Fixed type annotation problems\n' +
                  'âœ… Addressed security vulnerabilities\n' +
                  'âœ… Optimized performance issues\n\n' +
                  'All changes have been committed and pushed to the branch. ' +
                  'Please review the changes and run your tests to ensure everything works correctly.'
          })

  scheduled-backend-check:
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install dependencies
      run: pip install -r requirements.txt

    - name: Run Backend Linting
      run: |
        python -m flake8 services/api/ --max-line-length=88
        python -m black services/api/ --check
        python -m isort services/api/ --check-only

    - name: Run Security Scan
      run: |
        pip install safety
        safety check

    - name: Run Performance Analysis
      run: |
        pip install pylint
        python -m pylint services/api/ --rcfile=.pylintrc

    - name: Create Issue on Problems
      if: failure()
      uses: actions/github-script@v7
      with:
        script: |
          const title = 'Backend Quality Issues Detected'
          const body = 'Automated backend quality check found issues that need attention:\n\n' +
                      '- Code style violations\n' +
                      '- Security vulnerabilities\n' +
                      '- Performance issues\n\n' +
                      'Please review and fix these issues.'

          github.rest.issues.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: title,
            body: body,
            labels: ['backend', 'quality', 'automated']
          })
