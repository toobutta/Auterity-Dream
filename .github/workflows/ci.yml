name: CI

on:
  push:
    branches:
      - main
    paths-ignore:
      - '**/*.md'
  pull_request:
    branches:
      - main
    paths-ignore:
      - '**/*.md'

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  setup:
    runs-on: ubuntu-latest
    outputs:
      backend-cache-key: ${{ steps.backend-cache-key.outputs.key }}
      frontend-cache-key: ${{ steps.frontend-cache-key.outputs.key }}
    steps:
      - uses: actions/checkout@v4
      
      - name: Generate backend cache key
        id: backend-cache-key
        run: echo "key=backend-${{ hashFiles('backend/requirements.txt') }}-$(date +'%Y-%m')" >> $GITHUB_OUTPUT
      
      - name: Generate frontend cache key
        id: frontend-cache-key
        run: echo "key=frontend-${{ hashFiles('frontend/package-lock.json') }}-$(date +'%Y-%m')" >> $GITHUB_OUTPUT

  backend-test:
    needs: setup
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'
        cache: 'pip'
        cache-dependency-path: backend/requirements.txt
    
    - name: Cache Python dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ needs.setup.outputs.backend-cache-key }}
        restore-keys: |
          backend-${{ hashFiles('backend/requirements.txt') }}
          backend-
    
    - name: Install dependencies
      run: |
        cd backend
        pip install -r requirements.txt
    
    - name: Run tests
      run: |
        cd backend
        python -m pytest tests/ -v --junitxml=test-results.xml
    
    - name: Upload test results
      uses: actions/upload-artifact@v3
      with:
        name: backend-test-results
        path: backend/test-results.xml
        retention-days: 5

  frontend-test:
    needs: setup
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
    
    - name: Cache node modules
      uses: actions/cache@v3
      with:
        path: frontend/node_modules
        key: ${{ needs.setup.outputs.frontend-cache-key }}
        restore-keys: |
          frontend-${{ hashFiles('frontend/package-lock.json') }}
          frontend-
    
    - name: Install dependencies
      run: |
        cd frontend
        npm ci
    
    - name: Run tests
      run: |
        cd frontend
        npm test -- --coverage --watchAll=false --maxWorkers=2
    
    - name: Build
      run: |
        cd frontend
        npm run build
    
    - name: Cache build output
      uses: actions/cache@v3
      with:
        path: frontend/build
        key: frontend-build-${{ github.sha }}
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: frontend-build
        path: frontend/build
        retention-days: 5

  security-scan:
    runs-on: ubuntu-latest
    needs: [backend-test, frontend-test]
    steps:
    - uses: actions/checkout@v4.1.0
    
    - name: Set up Python
      uses: actions/setup-python@v4.1.0
      with:
        python-version: '3.12'
    
    - name: Setup Node.js
      uses: actions/setup-node@v4.1.0
      with:
        node-version: '18'
    
    - name: Install security tools
      run: |
        pip install pip-audit safety
        npm install -g npm-audit-resolver
    
    - name: Run frontend security audit
      run: |
        cd frontend
        npm audit --audit-level critical || exit 1
    
    - name: Run backend security audit
      run: |
        cd backend
        pip-audit -r requirements.txt || exit 1

  trivy-scan:
    runs-on: ubuntu-latest
    needs: [backend-test, frontend-test]
    steps:
    - uses: actions/checkout@v4
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        format: 'sarif'
        output: 'trivy-results.sarif'
        severity: 'CRITICAL,HIGH'
    
    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'trivy-results.sarif'

  summary:
    needs: [backend-test, frontend-test, security-scan, trivy-scan]
    runs-on: ubuntu-latest
    if: always()
    steps:
    - name: Check job status
      run: |
        if [[ "${{ needs.backend-test.result }}" != "success" || "${{ needs.frontend-test.result }}" != "success" ]]; then
          echo "Critical tests failed!"
          exit 1
        fi
        
        if [[ "${{ needs.security-scan.result }}" != "success" || "${{ needs.trivy-scan.result }}" != "success" ]]; then
          echo "Security scans detected issues. Please review the security reports."
          exit 0
        fi
        
        echo "All tests and scans completed successfully!"
