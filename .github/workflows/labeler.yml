name: "Pull Request Labeler"

on:
  pull_request_target:
    types: [opened, edited, synchronize]

permissions:
  contents: read
  pull-requests: write

jobs:
  labeler:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Apply labels
        uses: actions/labeler@v4
        with:
          repo-token: "${{ secrets.GITHUB_TOKEN }}"
          configuration-path: ".github/labeler.yml"

      - name: Add size labels
        uses: actions/github-script@v6
        with:
          script: |
            const { owner, repo, number } = context.issue;

            // Get PR details
            const pr = await github.rest.pulls.get({
              owner,
              repo,
              pull_number: number
            });

            const additions = pr.data.additions;
            const deletions = pr.data.deletions;
            const totalChanges = additions + deletions;

            // Remove existing size labels
            const existingLabels = pr.data.labels;
            const sizeLabels = existingLabels.filter(label =>
              label.name.startsWith('size/'));

            for (const label of sizeLabels) {
              await github.rest.issues.removeLabel({
                owner,
                repo,
                issue_number: number,
                name: label.name
              });
            }

            // Add new size label
            let sizeLabel;
            if (totalChanges < 10) {
              sizeLabel = 'size/XS';
            } else if (totalChanges < 30) {
              sizeLabel = 'size/S';
            } else if (totalChanges < 100) {
              sizeLabel = 'size/M';
            } else if (totalChanges < 500) {
              sizeLabel = 'size/L';
            } else {
              sizeLabel = 'size/XL';
            }

            await github.rest.issues.addLabels({
              owner,
              repo,
              issue_number: number,
              labels: [sizeLabel]
            });

      - name: Add priority labels based on files
        uses: actions/github-script@v6
        with:
          script: |
            const { owner, repo, number } = context.issue;

            // Get changed files
            const files = await github.rest.pulls.listFiles({
              owner,
              repo,
              pull_number: number
            });

            const changedFiles = files.data.map(file => file.filename);

            // Check for high priority changes
            const highPriorityPatterns = [
              /security/i,
              /auth/i,
              /\.github\/workflows/,
              /docker/i,
              /requirements\.txt/,
              /package\.json/
            ];

            const mediumPriorityPatterns = [
              /tests?/i,
              /docs?/i,
              /readme/i
            ];

            let priority = 'low';

            for (const file of changedFiles) {
              if (highPriorityPatterns.some(pattern => pattern.test(file))) {
                priority = 'high';
                break;
              } else if (mediumPriorityPatterns.some(pattern => pattern.test(file))) {
                priority = 'medium';
              }
            }

            // Add priority label
            await github.rest.issues.addLabels({
              owner,
              repo,
              issue_number: number,
              labels: [`priority/${priority}`]
            });
