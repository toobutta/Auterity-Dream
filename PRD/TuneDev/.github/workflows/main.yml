name: NeuroWeaver CI/CD Pipeline

on:
  push:
    branches: [ main, develop, feature/* ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'development'
        type: choice
        options:
        - development
        - testing
        - staging
        - production

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        component: [template-system, auto-specializer, inference-weaver, dataset-refinement, costguard-dashboard, workflow-ui]
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        if [ -f requirements/${{ matrix.component }}.txt ]; then pip install -r requirements/${{ matrix.component }}.txt; fi
        pip install pytest pytest-cov flake8
    
    - name: Lint with flake8
      run: |
        flake8 src/${{ matrix.component }} --count --select=E9,F63,F7,F82 --show-source --statistics
    
    - name: Test with pytest
      run: |
        pytest src/${{ matrix.component }}/tests/ --cov=src/${{ matrix.component }} --cov-report=xml
    
    - name: Upload coverage report
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: ${{ matrix.component }}
    
    - name: Build Docker image
      run: |
        docker build -t neuroweaver/${{ matrix.component }}:${{ github.sha }} -f docker/${{ matrix.component }}/Dockerfile .
    
    - name: Push to ECR
      if: github.event_name != 'pull_request'
      uses: aws-actions/amazon-ecr-login@v1
      with:
        registry: ${{ secrets.AWS_ECR_REGISTRY }}
      run: |
        docker tag neuroweaver/${{ matrix.component }}:${{ github.sha }} ${{ secrets.AWS_ECR_REGISTRY }}/neuroweaver/${{ matrix.component }}:${{ github.sha }}
        docker push ${{ secrets.AWS_ECR_REGISTRY }}/neuroweaver/${{ matrix.component }}:${{ github.sha }}

  integration-test:
    needs: build
    runs-on: ubuntu-latest
    if: github.event_name != 'pull_request'
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements/integration.txt
    
    - name: Set up integration environment
      run: |
        docker-compose -f docker-compose.integration.yml up -d
    
    - name: Run integration tests
      run: |
        pytest integration_tests/ --junitxml=integration-results.xml
    
    - name: Upload test results
      uses: actions/upload-artifact@v3
      with:
        name: integration-test-results
        path: integration-results.xml
    
    - name: Tear down integration environment
      run: |
        docker-compose -f docker-compose.integration.yml down

  deploy:
    needs: integration-test
    runs-on: ubuntu-latest
    if: github.event_name != 'pull_request'
    
    environment:
      name: ${{ github.event.inputs.environment || 'development' }}
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}
    
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: 1.0.0
    
    - name: Terraform Init
      run: |
        cd terraform/${{ github.event.inputs.environment || 'development' }}
        terraform init
    
    - name: Terraform Plan
      run: |
        cd terraform/${{ github.event.inputs.environment || 'development' }}
        terraform plan -out=tfplan
    
    - name: Terraform Apply
      if: github.event.inputs.environment != 'production' || github.ref == 'refs/heads/main'
      run: |
        cd terraform/${{ github.event.inputs.environment || 'development' }}
        terraform apply -auto-approve tfplan
    
    - name: Setup kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'latest'
    
    - name: Setup Helm
      uses: azure/setup-helm@v3
      with:
        version: 'latest'
    
    - name: Deploy with Helm
      run: |
        helm upgrade --install neuroweaver ./helm/neuroweaver \
          --namespace neuroweaver-${{ github.event.inputs.environment || 'development' }} \
          --create-namespace \
          --set environment=${{ github.event.inputs.environment || 'development' }} \
          --set imageTag=${{ github.sha }} \
          --values ./helm/values-${{ github.event.inputs.environment || 'development' }}.yaml
    
    - name: Verify deployment
      run: |
        kubectl rollout status deployment/neuroweaver-api -n neuroweaver-${{ github.event.inputs.environment || 'development' }}
        kubectl rollout status deployment/neuroweaver-frontend -n neuroweaver-${{ github.event.inputs.environment || 'development' }}

  monitor:
    needs: deploy
    runs-on: ubuntu-latest
    if: github.event_name != 'pull_request'
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}
    
    - name: Setup kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'latest'
    
    - name: Get deployment status
      run: |
        kubectl get pods -n neuroweaver-${{ github.event.inputs.environment || 'development' }}
        kubectl get services -n neuroweaver-${{ github.event.inputs.environment || 'development' }}
    
    - name: Check monitoring dashboards
      run: |
        curl -s -o /dev/null -w "%{http_code}" https://grafana.${{ secrets.DOMAIN }}/api/health
    
    - name: Run smoke tests
      run: |
        python monitoring/smoke_tests.py --environment ${{ github.event.inputs.environment || 'development' }}
    
    - name: Send deployment notification
      uses: slackapi/slack-github-action@v1.23.0
      with:
        channel-id: ${{ secrets.SLACK_CHANNEL_ID }}
        slack-message: "Deployment to ${{ github.event.inputs.environment || 'development' }} completed successfully. Monitoring checks passed."
      env:
        SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}