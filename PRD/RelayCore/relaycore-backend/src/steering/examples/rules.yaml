# Steering Rules Example
version: '1.0'
name: 'RelayCore Steering Rules'
description: 'Example steering rules for RelayCore'

# Rules are evaluated in priority order (lower numbers first)
rules:
  # Route code-related prompts to OpenAI's GPT-4
  - id: code-to-gpt4
    name: 'Code Prompts to GPT-4'
    description: 'Route code-related prompts to OpenAI GPT-4'
    priority: 10
    enabled: true
    conditions:
      - field: 'request.body.prompt'
        operator: 'regex'
        value: '(```|code|function|class|def |import |const |let |var |public class|#include)'
    operator: 'and'
    actions:
      - type: 'route'
        params:
          provider: 'openai'
          model: 'gpt-4'
      - type: 'log'
        params:
          level: 'info'
          message: 'Routing code prompt to GPT-4'
    continue: true
    tags:
      - 'code'
      - 'routing'

  # Route long prompts to Claude
  - id: long-to-claude
    name: 'Long Prompts to Claude'
    description: 'Route long prompts to Anthropic Claude'
    priority: 20
    enabled: true
    conditions:
      - field: 'request.body.prompt'
        operator: 'exists'
      - field: 'context.tokenCount'
        operator: 'gt'
        value: 4000
    operator: 'and'
    actions:
      - type: 'route'
        params:
          provider: 'anthropic'
          model: 'claude-3-opus'
      - type: 'log'
        params:
          level: 'info'
          message: 'Routing long prompt to Claude'
    continue: true
    tags:
      - 'long-context'
      - 'routing'

  # Add system prompt for customer service requests
  - id: customer-service-prompt
    name: 'Customer Service System Prompt'
    description: 'Add customer service system prompt for support requests'
    priority: 30
    enabled: true
    conditions:
      - field: 'request.body.prompt'
        operator: 'regex'
        value: '(support|help|issue|problem|not working|broken|error|bug)'
      - field: 'request.path'
        operator: 'contains'
        value: '/support'
    operator: 'and'
    actions:
      - type: 'inject'
        params:
          context:
            field: 'request.body.system_prompt'
            value: 'You are a helpful customer support agent for RelayCore. Be empathetic, clear, and solution-oriented. Provide step-by-step troubleshooting when appropriate.'
      - type: 'log'
        params:
          level: 'info'
          message: 'Added customer service system prompt'
    continue: true
    tags:
      - 'customer-service'
      - 'system-prompt'

  # Reject requests with harmful content
  - id: reject-harmful
    name: 'Reject Harmful Content'
    description: 'Reject requests containing harmful or prohibited content'
    priority: 5  # High priority to check early
    enabled: true
    conditions:
      - field: 'request.body.prompt'
        operator: 'regex'
        value: '(hack|exploit|illegal|bomb|terrorist|child abuse)'
    operator: 'and'
    actions:
      - type: 'reject'
        params:
          message: 'Your request contains prohibited content and cannot be processed.'
          status: 403
      - type: 'log'
        params:
          level: 'warn'
          message: 'Rejected harmful content'
    continue: false
    tags:
      - 'safety'
      - 'moderation'

  # Route premium users to higher-tier models
  - id: premium-users
    name: 'Premium User Routing'
    description: 'Route premium users to higher-tier models'
    priority: 15
    enabled: true
    conditions:
      - field: 'user.tier'
        operator: 'equals'
        value: 'premium'
    operator: 'and'
    actions:
      - type: 'route'
        params:
          provider: 'openai'
          model: 'gpt-4'
      - type: 'log'
        params:
          level: 'info'
          message: 'Routing premium user to GPT-4'
    continue: true
    tags:
      - 'premium'
      - 'routing'

  # Apply token optimization for free users
  - id: free-user-optimization
    name: 'Free User Token Optimization'
    description: 'Apply token optimization for free users'
    priority: 25
    enabled: true
    conditions:
      - field: 'user.tier'
        operator: 'equals'
        value: 'free'
    operator: 'and'
    actions:
      - type: 'transform'
        params:
          transformation:
            field: 'request.body.options'
            operation: 'replace'
            value:
              optimize_tokens: true
              max_tokens: 2000
      - type: 'log'
        params:
          level: 'info'
          message: 'Applied token optimization for free user'
    continue: true
    tags:
      - 'free-tier'
      - 'optimization'

# Default actions if no rules match
defaultActions:
  - type: 'route'
    params:
      provider: 'openai'
      model: 'gpt-3.5-turbo'
  - type: 'log'
    params:
      level: 'info'
      message: 'Using default routing'