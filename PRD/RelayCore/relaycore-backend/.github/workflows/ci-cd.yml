name: RelayCore CI/CD

on:
  push:
    branches: [ main ]
    paths-ignore:
      - '**/*.md'
      - 'docs/**'
  pull_request:
    branches: [ main ]
    paths-ignore:
      - '**/*.md'
      - 'docs/**'

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  setup:
    runs-on: ubuntu-latest
    outputs:
      cache-key: ${{ steps.cache-key.outputs.key }}
    steps:
      - uses: actions/checkout@v3
      
      - name: Generate cache key
        id: cache-key
        run: echo "key=relaycore-${{ hashFiles('**/package-lock.json') }}-$(date +'%Y-%m')" >> $GITHUB_OUTPUT

  build-and-test:
    needs: setup
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [18.x]
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v3
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
    
    - name: Cache node modules
      uses: actions/cache@v3
      with:
        path: node_modules
        key: ${{ needs.setup.outputs.cache-key }}
        restore-keys: |
          relaycore-${{ hashFiles('**/package-lock.json') }}
          relaycore-
    
    - name: Install dependencies
      run: npm ci
    
    - name: Lint and Test
      run: |
        npm run lint &
        npm test &
        wait
    
    - name: Build
      run: npm run build
    
    - name: Cache build output
      uses: actions/cache@v3
      with:
        path: dist
        key: relaycore-build-${{ github.sha }}
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: build-artifacts
        path: dist/
        retention-days: 5

  docker-build:
    needs: build-and-test
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Download build artifacts
      uses: actions/download-artifact@v3
      with:
        name: build-artifacts
        path: dist/
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
    
    - name: Login to DockerHub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}
    
    - name: Build and push Docker image
      uses: docker/build-push-action@v4
      with:
        context: .
        push: true
        tags: relaycore/relaycore:latest,relaycore/relaycore:${{ github.sha }}
        cache-from: type=registry,ref=relaycore/relaycore:latest
        cache-to: type=inline
        platforms: linux/amd64,linux/arm64
        build-args: |
          BUILDKIT_INLINE_CACHE=1
    
    - name: Scan Docker image for vulnerabilities
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: 'relaycore/relaycore:${{ github.sha }}'
        format: 'sarif'
        output: 'trivy-results.sarif'
        severity: 'CRITICAL,HIGH'
    
    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'trivy-results.sarif'

  deploy-staging:
    needs: docker-build
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    environment: staging
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'latest'
    
    - name: Configure kubectl
      run: |
        mkdir -p $HOME/.kube
        echo "${{ secrets.KUBE_CONFIG }}" > $HOME/.kube/config
        chmod 600 $HOME/.kube/config
    
    - name: Update deployment image
      run: |
        kubectl set image deployment/relaycore-staging relaycore=relaycore/relaycore:${{ github.sha }} -n relaycore-staging
    
    - name: Verify deployment
      run: |
        kubectl rollout status deployment/relaycore-staging -n relaycore-staging --timeout=300s
    
    - name: Run integration tests
      run: |
        echo "Running integration tests against staging environment..."
        # Add integration test commands here
        sleep 30 # Wait for services to be fully available
        # npm run test:integration -- --url=https://staging-api.relaycore.example.com

  deploy-production:
    needs: deploy-staging
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    environment: production
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'latest'
    
    - name: Configure kubectl
      run: |
        mkdir -p $HOME/.kube
        echo "${{ secrets.KUBE_CONFIG }}" > $HOME/.kube/config
        chmod 600 $HOME/.kube/config
    
    - name: Update deployment image
      run: |
        kubectl set image deployment/relaycore-production relaycore=relaycore/relaycore:${{ github.sha }} -n relaycore-production
    
    - name: Verify deployment
      run: |
        kubectl rollout status deployment/relaycore-production -n relaycore-production --timeout=300s
    
    - name: Send deployment notification
      uses: rtCamp/action-slack-notify@v2
      env:
        SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
        SLACK_CHANNEL: deployments
        SLACK_COLOR: good
        SLACK_TITLE: RelayCore Production Deployment
        SLACK_MESSAGE: 'RelayCore has been successfully deployed to production :rocket:'
