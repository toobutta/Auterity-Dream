# Enterprise Platform - Docker Compose Configuration
# Orchestrates API Gateway, Developer Platform, and White-Label services

version: '3.8'

services:
  # API Gateway Service
  enterprise-api-gateway:
    build:
      context: ./enterprise-platform/api-gateway
      dockerfile: Dockerfile
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - PORT=3000
      - JWT_SECRET=${JWT_SECRET}
      - REDIS_URL=redis://redis:6379
      - AUTMATRIX_URL=http://backend:8000
      - RELAYCORE_URL=http://relaycore:3001
      - NEUROWEAVER_URL=http://neuroweaver:8080
    depends_on:
      - redis
      - backend
    networks:
      - enterprise-network
    volumes:
      - ./logs/gateway:/app/logs
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Developer Platform Service  
  developer-platform:
    build:
      context: ./enterprise-platform/developer-platform
      dockerfile: Dockerfile
    ports:
      - "3002:3000"
    environment:
      - NODE_ENV=production
      - PORT=3000
      - OPENAPI_SPEC_URL=http://backend:8000/openapi.json
      - SDK_OUTPUT_DIR=/app/sdks
    volumes:
      - sdk-storage:/app/sdks
      - ./enterprise-platform/developer-platform/templates:/app/templates
    networks:
      - enterprise-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # White-Label Theme Service
  white-label-service:
    build:
      context: ./enterprise-platform/white-label
      dockerfile: Dockerfile
    ports:
      - "3003:3000"
    environment:
      - NODE_ENV=production
      - PORT=3000
    volumes:
      - theme-storage:/app/themes
      - asset-storage:/app/assets
      - bundle-storage:/app/dist
    networks:
      - enterprise-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis for caching and rate limiting
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    networks:
      - enterprise-network
    restart: unless-stopped
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx Load Balancer for Enterprise Services
  enterprise-nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/enterprise.conf:/etc/nginx/conf.d/default.conf
      - ./nginx/ssl:/etc/nginx/ssl
    depends_on:
      - enterprise-api-gateway
      - developer-platform
      - white-label-service
    networks:
      - enterprise-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Monitoring and Metrics
  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - enterprise-network
    restart: unless-stopped

  grafana:
    image: grafana/grafana:latest
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
    volumes:
      - grafana-data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    networks:
      - enterprise-network
    restart: unless-stopped

networks:
  enterprise-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  redis-data:
    driver: local
  sdk-storage:
    driver: local
  theme-storage:
    driver: local
  asset-storage:
    driver: local
  bundle-storage:
    driver: local
  prometheus-data:
    driver: local
  grafana-data:
    driver: local

# Environment Variables Template
# Create a .env file with these variables:
#
# JWT_SECRET=your-super-secret-jwt-key-here
# GRAFANA_PASSWORD=secure-grafana-password
# REDIS_PASSWORD=secure-redis-password
# SSL_CERT_PATH=/path/to/ssl/cert.pem
# SSL_KEY_PATH=/path/to/ssl/key.pem
