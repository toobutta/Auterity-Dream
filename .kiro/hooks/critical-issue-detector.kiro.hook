{
  "enabled": true,
  "name": "🚨 Critical Issue Detector",
  "description": "Detect and alert on critical issues that block production deployment",
  "version": "1",
  "when": {
    "type": "fileEdited",
    "patterns": ["**/*.ts", "**/*.tsx", "**/*.py", "**/*.json", "**/*.md"]
  },
  "then": {
    "type": "runCommand",
    "command": "echo \"🔍 Scanning for critical issues in: ${file}\" && ISSUE_COUNT=0 && if [[ \"${file}\" == *\"package.json\"* ]]; then cd frontend && VULN_COUNT=$(npm audit --audit-level=moderate --json 2>/dev/null | jq -r '.metadata.vulnerabilities.moderate + .metadata.vulnerabilities.high + .metadata.vulnerabilities.critical' 2>/dev/null || echo \"0\") && [ \"$VULN_COUNT\" -gt 0 ] && echo \"🔒 $VULN_COUNT security vulnerabilities detected\" && ISSUE_COUNT=$((ISSUE_COUNT + 1)) && cd ..; fi && if [[ \"${file}\" == *\".ts\"* ]] || [[ \"${file}\" == *\".tsx\"* ]]; then cd frontend && TS_ERROR_COUNT=$(npx tsc --noEmit --skipLibCheck 2>&1 | grep -c \"error TS\" || echo \"0\") && [ \"$TS_ERROR_COUNT\" -gt 0 ] && echo \"📝 $TS_ERROR_COUNT TypeScript compilation errors\" && ISSUE_COUNT=$((ISSUE_COUNT + 1)) && cd ..; fi && if [[ \"${file}\" == *\".py\"* ]]; then python -m py_compile \"${file}\" 2>/dev/null || (echo \"🐍 Python syntax error in ${file}\" && ISSUE_COUNT=$((ISSUE_COUNT + 1))); fi && if grep -iE \"(api[_-]?key|secret[_-]?key|password|token)[[:space:]]*[:=][[:space:]]*['\\\"][^'\\\"]{8,}['\\\"]\"; then echo \"🔐 Potential secret exposed in ${file}\" && ISSUE_COUNT=$((ISSUE_COUNT + 1)); fi && [ \"$ISSUE_COUNT\" -eq 0 ] && echo \"✅ No critical issues detected in ${file}\" || echo \"🚨 $ISSUE_COUNT critical issues found - fix immediately\""
  }
}
